{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["getResponse","url","fetch","then","response","json","data","TodoList","todos","selectUser","className","map","todo","key","id","completed","type","checked","readOnly","title","onClick","userId","CurrentUser","state","selectedUser","prevProps","prevState","this","props","setState","name","email","phone","clearUser","React","Component","App","selectedUserId","titleFilter","todoStatus","event","inputHandler","target","value","selectHandler","formatedList","filter","Object","values","includes","toString","htmlFor","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58314be9.chunk.js","sourcesContent":["\nconst getResponse = url => fetch(url)\n  .then(response => response.json())\n  .then(response => response.data);\n\nexport default getResponse;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({ todos, selectUser }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            // eslint-disable-next-line\n            className={`TodoList__item TodoList__item--${todo.completed ? 'checked' : 'unchecked'}`}\n          >\n            <label>\n              {todo.completed ? (\n                <input\n                  type=\"checkbox\"\n                  checked\n                  readOnly\n                />\n              ) : (\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                />\n              )}\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => {\n                selectUser(todo.userId);\n              }}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport getResponse from '../../api/api';\n\nconst url = 'https://mate-api.herokuapp.com/users';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    selectedUser: {},\n  }\n\n  componentDidMount(prevProps, prevState) {\n    getResponse(`${url}/${this.props.userId}`)\n      .then((selectedUser) => {\n        this.setState({ selectedUser });\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.userId !== this.props.userId) {\n      getResponse(`${url}/${this.props.userId}`)\n        .then((selectedUser) => {\n          this.setState({ selectedUser });\n        });\n    }\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n\n    return (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {selectedUser.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n          <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n          <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n          <button type=\"button\" onClick={this.props.clearUser}>\n            Clear\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport getResponse from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst url = 'https://mate-api.herokuapp.com/todos';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    titleFilter: '',\n    todoStatus: 'all',\n  };\n\n  componentDidMount() {\n    getResponse(url)\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  selectUser = (userId, event) => {\n    if (userId !== this.state.selectedUserId) {\n      this.setState({ selectedUserId: userId });\n    }\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  inputHandler = (event) => {\n    this.setState({ titleFilter: event.target.value });\n  }\n\n  selectHandler = (event) => {\n    this.setState({ todoStatus: event.target.value });\n  }\n\n  render() {\n    const { todos, selectedUserId, titleFilter, todoStatus } = this.state;\n\n    const formatedList = todos\n      .filter(todo => !Object.values(todo).includes(null))\n      .filter(todo => todo.title.includes(titleFilter))\n      .filter((todo) => {\n        switch (todoStatus) {\n          case ('all'):\n            return true;\n          case (todo.completed.toString()):\n            return true;\n          default:\n            return false;\n        }\n      });\n\n    return (\n      <div className=\"App\">\n        <div className=\"searchWrap\">\n          <label htmlFor=\"\">\n            TODO name:\n            <input\n              type=\"text\"\n              value={titleFilter}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <select onChange={this.selectHandler}>\n            <option value=\"all\">All</option>\n            <option value>Finished</option>\n            <option value={false}>Unfinished</option>\n          </select>\n        </div>\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={formatedList}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}