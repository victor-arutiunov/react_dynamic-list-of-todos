{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["getResponse","url","fetch","then","response","json","data","TodoList","todos","titleFilter","selectedUserId","selectUser","inputHandler","selectHandler","className","htmlFor","type","value","onChange","map","todo","key","id","completed","checked","readOnly","title","userId","onClick","CurrentUser","state","selectedUser","prevProps","prevState","this","props","setState","name","email","phone","clearUser","React","Component","App","todoStatus","event","target","formatedList","filter","Object","values","includes","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c80d0144.chunk.js","sourcesContent":["\nconst baseURL = 'https://mate-api.herokuapp.com/';\n\nconst getResponse = url => fetch(`${baseURL}${url}`)\n  .then(response => response.json())\n  .then(response => response.data);\n\nexport default getResponse;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  titleFilter,\n  selectedUserId,\n  selectUser,\n  inputHandler,\n  selectHandler,\n}) => (\n  <div className=\"TodoList\">\n\n    <div className=\"searchWrap\">\n      <label htmlFor=\"\">\n        TODO name:\n        <input\n          type=\"text\"\n          value={titleFilter}\n          onChange={inputHandler}\n        />\n      </label>\n      <select onChange={selectHandler}>\n        <option value=\"all\">All</option>\n        <option value>Finished</option>\n        <option value={false}>Unfinished</option>\n      </select>\n    </div>\n\n    <h2>Todos:</h2>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            // eslint-disable-next-line\n            className={`TodoList__item TodoList__item--${todo.completed ? 'checked' : 'unchecked'}`}\n          >\n            <label>\n              {todo.completed ? (\n                <input\n                  type=\"checkbox\"\n                  checked\n                  readOnly\n                />\n              ) : (\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                />\n              )}\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={selectedUserId === todo.userId ? (\n                'TodoList__user-button--selected button'\n              ) : (\n                'TodoList__user-button button'\n              )}\n              type=\"button\"\n              onClick={() => {\n                selectUser(todo.userId);\n              }}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  titleFilter: PropTypes.string.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  inputHandler: PropTypes.func.isRequired,\n  selectHandler: PropTypes.func.isRequired,\n\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport getResponse from '../../api/api';\n\nconst url = 'users';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    selectedUser: {},\n  }\n\n  componentDidMount(prevProps, prevState) {\n    getResponse(`${url}/${this.props.userId}`)\n      .then((selectedUser) => {\n        this.setState({ selectedUser });\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.userId !== this.props.userId) {\n      getResponse(`${url}/${this.props.userId}`)\n        .then((selectedUser) => {\n          this.setState({ selectedUser });\n        });\n    }\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n\n    return (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {selectedUser.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n          <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n          <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n          <button type=\"button\" onClick={this.props.clearUser}>\n            Clear\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport getResponse from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst url = 'todos';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    titleFilter: '',\n    todoStatus: 'all',\n  };\n\n  componentDidMount() {\n    getResponse(url)\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  selectUser = (userId, event) => {\n    if (userId !== this.state.selectedUserId) {\n      this.setState({ selectedUserId: userId });\n    }\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  inputHandler = (event) => {\n    this.setState({ titleFilter: event.target.value });\n  }\n\n  selectHandler = (event) => {\n    this.setState({ todoStatus: event.target.value });\n  }\n\n  render() {\n    const { todos, selectedUserId, titleFilter, todoStatus } = this.state;\n\n    const formatedList = todos\n      .filter(todo => !Object.values(todo).includes(null))\n      .filter(todo => todo.title.includes(titleFilter))\n      .filter((todo) => {\n        switch (todoStatus) {\n          case ('all'):\n            return true;\n          case (todo.completed.toString()):\n            return true;\n          default:\n            return false;\n        }\n      });\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={formatedList}\n            titleFilter={titleFilter}\n            selectedUserId={selectedUserId}\n            selectUser={this.selectUser}\n            inputHandler={this.inputHandler}\n            selectHandler={this.selectHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}